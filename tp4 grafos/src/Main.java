import java.util.*;

public class Main {

	public static void main(String[] args) {

		// Creo un grafo dirigdo donde las etiquetas de los arcos son valores Float
		GrafoDirigido<Float> grafito = new GrafoDirigido<>();
		
		// Agrego los vertices 1 y 2
		grafito.agregarVertice(1);
		grafito.agregarVertice(2);
		grafito.agregarVertice(3);
		grafito.agregarVertice(4);
		grafito.agregarVertice(5);
		// Genero un arco desde 1 hasta 2 con el valor de etiqueta 3
		grafito.agregarArco(1, 2, 3F);
		grafito.agregarArco(2, 1, 3F);
		grafito.agregarArco(1, 3, 5F);
		grafito.agregarArco(3, 4, 1F);
		grafito.agregarArco(4, 5, 3F);
		grafito.agregarArco(5, 2, 1F);
		//System.out.println(grafito.caminoCiclico());
		System.out.println(grafito.esPartedelCiclo(2));
		/*ğŸ”¹ Ejercicio 9
Escriba un algoritmo que detecte fuentes y sumideros en un grafo dirigido:

Fuente: vÃ©rtice con grado de entrada 0.

Sumidero: vÃ©rtice con grado de salida 0.

ğŸ”¹ Ejercicio 10
Dado un grafo dirigido y un vÃ©rtice v, determine si v es parte de algÃºn ciclo del grafo.

ğŸ”¹ Ejercicio 11
Implemente un algoritmo que, dado un grafo dirigido acÃ­clico (DAG), devuelva una ordenaciÃ³n topolÃ³gica de sus vÃ©rtices.

ğŸ”¹ Ejercicio 12
Dado un grafo dirigido, determine si todos los vÃ©rtices son alcanzables desde un Ãºnico vÃ©rtice origen.

ğŸ”¹ Ejercicio 13
Implemente un algoritmo que devuelva el camino mÃ¡s corto (menor cantidad de arcos) entre dos vÃ©rtices en un grafo sin pesos.
(Sugerencia: BFS)

ğŸ”¹ Ejercicio 14
Escriba una funciÃ³n que determine si eliminando un vÃ©rtice v de un grafo dirigido, se desconecta algÃºn par de vÃ©rtices que antes estaban conectados.

ğŸ”¹ Ejercicio 15
Dado un grafo dirigido, devuelva la cantidad de componentes fuertemente conexas (SCCs).
(Si querÃ©s mÃ¡s desafÃ­o, hacelo usando Kosaraju o Tarjan, pero tambiÃ©n podÃ©s resolverlo con DFS + transpuesta)*/
	}

}
